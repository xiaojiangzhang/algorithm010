class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        """
        动态规划求解
        1、最优子结构
        dp(n) 表示第i个房子maxValue   dp(n) = max(dp(n-1), dp(n-2) + nums[i])
        2、存储中间状态
        value[i]
        3、递推公式（状态转移方程或递推方程）    
        value[i] = max(value[i-1], value[i-2] + nums[i])
        """
        if not nums:
            return 0
        if len(nums) <= 2:
            return max(nums)
        dp = [0 for _ in range(len(nums))]
        dp[0] = nums[0]
        # dp[1]初始化为前2个元素中的最大值，dp从2开始遍历
        dp[1] = max(nums[0], nums[1])
        for i in range(2, len(nums)):
            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
        return dp[-1]


# runtime:24 ms
# memory:12.8 MB
